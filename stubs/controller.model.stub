<?php

namespace {{ namespace }};

use App\Http\Requests\{{ model }}Request;
use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;

class {{ class }} extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $this->authorize('viewAny', {{ model }}::class);

        return $this->view([
            '' => {{ model }}::all(),
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $this->authorize('create', {{ model }}::class);

        return $this->view([

        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\{{ model }}Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store({{ model }}Request $request)
    {
        {{ model }}::create($request->validated());

        return redirect()
            ->action([static::class, 'index'])
            ->with('success', '{{ model }} Has Been Created.');
    }

    /**
     * Display the specified resource.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function show({{ model }} ${{ modelVariable }})
    {
        $this->authorize('view', ${{ modelVariable }});

        return $this->view([

        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function edit({{ model }} ${{ modelVariable }})
    {
        $this->authorize('update', ${{ modelVariable }});

        return $this->view([

        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Requests\{{ model }}Request  $request
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function update({{ model }}Request $request, {{ model }} ${{ modelVariable }})
    {
        ${{ modelVariable }}->update($request->validated());

        return redirect()
            ->action([static::class, 'index'])
            ->with('success', '{{ model }} Has Been Updated.');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function destroy({{ model }} ${{ modelVariable }})
    {
        $this->authorize('delete', ${{ modelVariable }});

        ${{ modelVariable }}->delete();

        return redirect()
            ->action([static::class, 'index'])
            ->with('success', '{{ model }} Has Been Deleted.');
    }

    /**
     * Restore the specified resource from trash.
     *
     * @param \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function restore({{ model }} ${{ modelVariable }})
    {
        $this->authorize('restore', ${{ modelVariable }});

        ${{ modelVariable }}->restore();

        return redirect()
            ->action([static::class, 'index'])
            ->with('success', '{{ model }} Has Been Restored.');
    }

    /**
     * Permanently remove the specified resource from storage.
     *
     * @param \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function forceDelete({{ model }} ${{ modelVariable }})
    {
        $this->authorize('forceDelete', ${{ modelVariable }});

        ${{ modelVariable }}->forceDelete();

        return redirect()
            ->action([static::class, 'index'])
            ->with('success', '{{ model }} Has Been Permanently Deleted.');
    }
}
